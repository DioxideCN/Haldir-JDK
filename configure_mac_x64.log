configure: Configuration created at Sat Apr 29 14:54:19 CST 2023.
checking for basename... /usr/bin/basename
checking for dirname... /usr/bin/dirname
checking for file... /usr/bin/file
checking for ldd... no
checking for bash... /bin/bash
checking for cat... /bin/cat
checking for chmod... /bin/chmod
checking for cp... /bin/cp
checking for cut... /usr/bin/cut
checking for date... /bin/date
checking for gdiff... [not found]
checking for diff... /usr/bin/diff
checking for echo... echo [builtin]
checking for expr... /bin/expr
checking for find... /usr/bin/find
checking for gunzip... /usr/bin/gunzip
checking for pigz... [not found]
checking for gzip... /usr/bin/gzip
checking for head... /usr/bin/head
checking for ln... /bin/ln
checking for ls... /bin/ls
checking for gmkdir... [not found]
checking for mkdir... /bin/mkdir
checking for mktemp... /usr/bin/mktemp
checking for mv... /bin/mv
checking for gawk... [not found]
checking for nawk... [not found]
checking for awk... /usr/bin/awk
checking for printf... printf [builtin]
checking for rm... /bin/rm
checking for rmdir... /bin/rmdir
checking for sh... /bin/sh
checking for sort... /usr/bin/sort
checking for tail... /usr/bin/tail
checking for gtar... [not found]
checking for tar... /usr/bin/tar
checking for tee... /usr/bin/tee
checking for touch... /usr/bin/touch
checking for tr... /usr/bin/tr
checking for uname... /usr/bin/uname
checking for wc... /usr/bin/wc
checking for xargs... /usr/bin/xargs
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for a sed that does not truncate output... /usr/bin/sed
checking for df... /bin/df
checking for nice... /usr/bin/nice
checking for greadlink... [not found]
checking for readlink... /usr/bin/readlink
checking for cygpath... [not found]
checking for wslpath... [not found]
checking for lsb_release... [not found]
checking for cmd.exe... [not found]
checking for cmp... /usr/bin/cmp
checking for uniq... /usr/bin/uniq
checking build system type... aarch64-apple-darwin22.5.0
checking host system type... aarch64-apple-darwin22.5.0
checking target system type... aarch64-apple-darwin22.5.0
checking openjdk-build os-cpu... macosx-aarch64
checking openjdk-target os-cpu... macosx-aarch64
configure: --with-target-bits are set to build platform address size; argument has no meaning
checking compilation type... native
checking for top-level directory... /Users/dioxide/Environment/jdk-22.10.0/Haldir-JDK
checking if custom source is suppressed (openjdk-only)... disabled, default
checking for --enable-debug... disabled, default
checking which debug level to use... fastdebug
checking which variants of the JVM to build... server client
checking if absolute paths should be allowed in the build output... yes, debug build
checking for xcodebuild... /usr/bin/xcodebuild
checking for sdk name... 
checking for sysroot... /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk
checking for toolchain path... 
checking for extra path... 
checking where to store configuration... in default location
checking what configuration name to use... macosx-aarch64-serverANDclient-fastdebug
checking for zypper... [not found]
checking for apt-get... [not found]
checking for yum... [not found]
checking for brew... /opt/homebrew/bin/brew
checking for pandoc... [not found]
checking for gmake... /opt/homebrew/bin/gmake
configure: Testing potential make at /opt/homebrew/bin/gmake, found using gmake in PATH
configure: Using GNU make at /opt/homebrew/bin/gmake (version: GNU Make 4.3)
checking if make --output-sync is supported... yes
checking for make --output-sync value... none, default
checking if find supports -delete... yes
checking what type of tar was found... bsd
checking that grep (/usr/bin/grep) -Fx handles empty lines in the pattern list correctly... yes
checking for unzip... /usr/bin/unzip
checking for zip... /usr/bin/zip
checking for greadelf... [not found]
checking for readelf... [not found]
checking for dot... [not found]
checking for hg... [not found]
checking for git... /usr/bin/git
checking for stat... /usr/bin/stat
checking for time... time [builtin]
checking for flock... [not found]
checking for dtrace... /usr/sbin/dtrace
checking for gpatch... [not found]
checking for patch... /usr/bin/patch
checking if date is a GNU compatible version... no
checking for dsymutil... /opt/homebrew/opt/llvm/bin/dsymutil
checking for mig... /usr/bin/mig
checking for xattr... /usr/bin/xattr
checking for codesign... /usr/bin/codesign
checking for SetFile... /usr/bin/SetFile
checking for ulimit... ulimit [builtin]
checking bash version... 3.2.57
checking if bash supports pipefail... yes
checking if bash supports errexit (-e)... yes
checking for pkg-config... /opt/homebrew/bin/pkg-config
checking pkg-config is at least version 0.9.0... yes
checking for default LOG value... 
checking if packaged modules are kept... enabled, default
checking for version string... 17.0.7$+0) (Haldir JDK.Haldir-JDK
configure: Found potential Boot JDK using configure arguments
checking for Boot JDK... /Users/dioxide/Environment/jdk-22.10.0/jdk-17.0.4.1.jdk/Contents/Home
checking Boot JDK version... java version "17.0.4.1" 2022-08-18 LTS Java(TM) SE Runtime Environment (build 17.0.4.1+1-LTS-2) Java HotSpot(TM) 64-Bit Server VM (build 17.0.4.1+1-LTS-2, mixed mode, sharing)
checking for java [Boot JDK]... $BOOT_JDK/bin/java
checking for javac [Boot JDK]... $BOOT_JDK/bin/javac
checking for javadoc [Boot JDK]... $BOOT_JDK/bin/javadoc
checking for jar [Boot JDK]... $BOOT_JDK/bin/jar
checking if Boot JDK jar supports --date=TIMESTAMP... false
checking if Boot JDK is 32 or 64 bits... 64
checking for local Boot JDK Class Data Sharing (CDS)... yes, created
checking for Build JDK... yes, will use output dir
checking for docs-reference JDK... no, using interim javadoc for the docs-reference targets
checking if we should build headless-only (no GUI)... disabled, default
checking if linker should clean out unused code (linktime-gc)... disabled, default
checking for graphviz dot... no, cannot generate full docs
checking for pandoc... no, cannot generate full docs
checking for --enable-full-docs... disabled, from default 'auto'
checking for cacerts file... default
checking for cacerts source... default
checking for --enable-unlimited-crypto... enabled, default
checking for jni library path... default
checking if static build is available... yes
checking if static build is enabled... disabled, default
configure: Xcode major version: 14
configure: Using default toolchain clang (clang/LLVM)
checking for clang... /opt/homebrew/opt/llvm/bin/clang
checking resolved symbolic links for CC... /opt/homebrew/Cellar/llvm/15.0.2/bin/clang-15
configure: Using clang C compiler version 15.0.2 [Homebrew clang version 15.0.2 Target: arm64-apple-darwin22.5.0 Thread model: posix InstalledDir: /opt/homebrew/opt/llvm/bin]
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C... yes
checking whether /opt/homebrew/opt/llvm/bin/clang accepts -g... yes
checking for /opt/homebrew/opt/llvm/bin/clang option to enable C11 features... none needed
checking for clang++... /opt/homebrew/opt/llvm/bin/clang++
checking resolved symbolic links for CXX... /opt/homebrew/Cellar/llvm/15.0.2/bin/clang-15
configure: Using clang C++ compiler version 15.0.2 [Homebrew clang version 15.0.2 Target: arm64-apple-darwin22.5.0 Thread model: posix InstalledDir: /opt/homebrew/opt/llvm/bin]
checking whether the compiler supports GNU C++... yes
checking whether /opt/homebrew/opt/llvm/bin/clang++ accepts -g... yes
checking for /opt/homebrew/opt/llvm/bin/clang++ option to enable C++11 features... none needed
checking how to run the C preprocessor... /opt/homebrew/opt/llvm/bin/clang -E
checking how to run the C++ preprocessor... /opt/homebrew/opt/llvm/bin/clang++ -E
configure: Using clang linker version 857.1 [@(#)PROGRAM:ld  PROJECT:ld64-857.1]
checking for ar... /usr/bin/ar
checking for lipo... /usr/bin/lipo
checking for otool... /usr/bin/otool
checking for install_name_tool... /usr/bin/install_name_tool
checking for metal... [not found]
checking if metal can be run using xcrun... yes, will be using 'xcrun -sdk macosx metal'
checking for metallib... [not found]
checking if metallib can be run using xcrun... yes, will be using 'xcrun -sdk macosx metallib'
checking for strip... /usr/bin/strip
checking for nm... /usr/bin/nm
checking for gobjdump... [not found]
checking for objdump... /usr/bin/objdump
checking for c++filt... /usr/bin/c++filt
checking for jtreg... [not found]
checking for jtreg test harness... no, not found
checking for jmh (Java Microbenchmark Harness)... no, disabled
checking for jib... no
checking if CC supports "-m64"... yes
checking if CXX supports "-m64"... yes
checking if both CC and CXX support "-m64"... yes
checking for stdio.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for strings.h... yes
checking for sys/stat.h... yes
checking for sys/types.h... yes
checking for unistd.h... yes
checking for stdio.h... (cached) yes
checking size of int *... 8
checking for target address size... 64 bits
checking whether byte ordering is bigendian... no
checking what source date to use... determined at build time, from 'updated'
checking for --enable-reproducible-build... disabled, default
checking for --enable-warnings-as-errors... disabled, from command line
checking if TARGET is x86... no
checking if CC supports "-fno-delete-null-pointer-checks"... yes
checking if CXX supports "-fno-delete-null-pointer-checks"... yes
checking if both CC and CXX support "-fno-delete-null-pointer-checks"... yes
checking if CC supports "-ffp-contract=off"... yes
checking if CXX supports "-ffp-contract=off"... yes
checking if both CC and CXX support "-ffp-contract=off"... yes
checking if BUILD is x86... no
checking if BUILD_CC supports "-fno-delete-null-pointer-checks"... yes
checking if BUILD_CXX supports "-fno-delete-null-pointer-checks"... yes
checking if both BUILD_CC and BUILD_CXX support "-fno-delete-null-pointer-checks"... yes
checking if BUILD_CC supports "-ffp-contract=off"... yes
checking if BUILD_CXX supports "-ffp-contract=off"... yes
checking if both BUILD_CC and BUILD_CXX support "-ffp-contract=off"... yes
checking what type of native debug symbols to use... external
checking if we should add external native debug symbols to the shipped bundles... no
checking if native coverage is available... yes
checking for --enable-native-coverage... disabled, default
checking if AddressSanitizer (asan) is available... yes
checking for --enable-asan... disabled, default
checking for cups/cups.h... yes
checking for cups/ppd.h... yes
Using freetype: bundled
checking for --enable-libffi-bundling... disabled, default
checking for which libjpeg to use... bundled
checking for which giflib to use... bundled
checking for PNG... yes
checking for which libpng to use... bundled
checking for compress in -lz... yes
checking for which zlib to use... system
checking for system zlib functionality... ok
checking for which lcms to use... bundled
checking for which harfbuzz to use... bundled
checking for cos in -lm... yes
checking for dlopen in -ldl... yes
checking for JVM features enabled by the user... none
checking for JVM features disabled by the user... none
checking if platform is supported by CDS... yes
checking if JVM feature 'cds' is available... yes
checking for dtrace tool... /usr/sbin/dtrace
checking for sys/sdt.h... yes
checking if JVM feature 'dtrace' is available... yes
checking if platform is supported by JFR... yes
checking if JVM feature 'jfr' is available... yes
checking if platform is supported by JVMCI... yes
checking if JVM feature 'jvmci' is available... yes
checking if platform is supported by Shenandoah... yes
checking if JVM feature 'shenandoahgc' is available... yes
checking if static-build is enabled in configure... no, use --enable-static-build to enable static build.
checking if JVM feature 'static-build' is available... no
checking if platform is supported by ZGC... yes
checking if JVM feature 'zgc' is available... yes
checking JVM features to use for variant 'server'... 'cds compiler1 compiler2 dtrace epsilongc g1gc jfr jni-check jvmci jvmti management nmt parallelgc serialgc services shenandoahgc vm-structs zgc'
checking JVM features to use for variant 'client'... 'cds compiler1 dtrace epsilongc g1gc jfr jni-check jvmti management nmt parallelgc serialgc services shenandoahgc vm-structs zgc'
checking if the jtreg failure handler is available... no (jtreg not present)
checking if the jtreg failure handler should be built... disabled, from default 'auto'
checking if the CDS classlist generation should be enabled... enabled, from default 'auto'
checking if any translations should be excluded... no
checking if static man pages should be copied... enabled, default
checking if CDS archive is available... yes
checking if a default CDS archive should be generated... enabled, from default 'auto'
checking if CDS archive is available... yes
checking if compatible cds region alignment enabled... disabled, default
checking for macosx code signing mode... auto, default
checking for macosx code signing identity... openjdk_codesign, default
checking if debug mode codesign is possible... yes
checking for macosx code signing mode... debug
checking for number of cores... 10
checking for memory size... 16384 MB
checking for appropriate number of jobs to run in parallel... 10
checking whether to use javac server... enabled, default
checking flags for boot jdk java command ...  -Duser.language=en -Duser.country=US  -XX:+UnlockDiagnosticVMOptions -XX:-VerifySharedSpaces -XX:SharedArchiveFile=/Users/dioxide/Environment/jdk-22.10.0/Haldir-JDK/build/macosx-aarch64-serverANDclient-fastdebug/configure-support/classes.jsa -Xshare:auto 
checking flags for boot jdk java command for big workloads...  -Xms64M -Xmx1600M
checking flags for bootcycle boot jdk java command for big workloads... -Xms64M -Xmx1600M
checking flags for boot jdk java command for small workloads...  -XX:+UseSerialGC -Xms32M -Xmx512M -XX:TieredStopAtLevel=1
checking for --enable-icecc... disabled, default
checking if precompiled headers are available... yes
checking for --enable-precompiled-headers... enabled, from default 'auto'
checking for ccache... /opt/homebrew/bin/ccache
checking if ccache is available... yes
checking if ccache is enabled... disabled, default
checking if build directory is on local disk... yes
configure: creating /Users/dioxide/Environment/jdk-22.10.0/Haldir-JDK/build/macosx-aarch64-serverANDclient-fastdebug/configure-support/config.status
config.status: creating /Users/dioxide/Environment/jdk-22.10.0/Haldir-JDK/build/macosx-aarch64-serverANDclient-fastdebug/spec.gmk
config.status: creating /Users/dioxide/Environment/jdk-22.10.0/Haldir-JDK/build/macosx-aarch64-serverANDclient-fastdebug/bootcycle-spec.gmk
config.status: creating /Users/dioxide/Environment/jdk-22.10.0/Haldir-JDK/build/macosx-aarch64-serverANDclient-fastdebug/buildjdk-spec.gmk
config.status: creating /Users/dioxide/Environment/jdk-22.10.0/Haldir-JDK/build/macosx-aarch64-serverANDclient-fastdebug/compare.sh
config.status: creating /Users/dioxide/Environment/jdk-22.10.0/Haldir-JDK/build/macosx-aarch64-serverANDclient-fastdebug/Makefile

====================================================
The existing configuration has been successfully updated in
/Users/dioxide/Environment/jdk-22.10.0/Haldir-JDK/build/macosx-aarch64-serverANDclient-fastdebug
using configure arguments '--with-boot-jdk=/Users/dioxide/Environment/jdk-22.10.0/jdk-17.0.4.1.jdk/Contents/Home --with-target-bits=64 --with-jvm-variants=server,client --disable-warnings-as-errors --with-debug-level=fastdebug'.

Configuration summary:
* Name:           macosx-aarch64-serverANDclient-fastdebug
* Debug level:    fastdebug
* HS debug level: fastdebug
* JVM variants:   server client
* JVM features:   server: 'cds compiler1 compiler2 dtrace epsilongc g1gc jfr jni-check jvmci jvmti management nmt parallelgc serialgc services shenandoahgc vm-structs zgc' client: 'cds compiler1 dtrace epsilongc g1gc jfr jni-check jvmti management nmt parallelgc serialgc services shenandoahgc vm-structs zgc' 
* OpenJDK target: OS: macosx, CPU architecture: aarch64, address length: 64
* Version string: 17.0.7$+0) (Haldir JDK.Haldir-JDK (17.0.7-standard)

Tools summary:
* Boot JDK:       java version "17.0.4.1" 2022-08-18 LTS Java(TM) SE Runtime Environment (build 17.0.4.1+1-LTS-2) Java HotSpot(TM) 64-Bit Server VM (build 17.0.4.1+1-LTS-2, mixed mode, sharing) (at /Users/dioxide/Environment/jdk-22.10.0/jdk-17.0.4.1.jdk/Contents/Home)
* Toolchain:      clang (clang/LLVM from Xcode 14.3)
* C Compiler:     Version 15.0.2 (at /opt/homebrew/opt/llvm/bin/clang)
* C++ Compiler:   Version 15.0.2 (at /opt/homebrew/opt/llvm/bin/clang++)

Build performance summary:
* Cores to use:   10
* Memory limit:   16384 MB

NOTE: You have requested to build more than one version of the JVM, which
will result in longer build times.

WARNING: The result of this configuration has overridden an older
configuration. You *should* run 'make clean' to make sure you get a
proper build. Failure to do so might result in strange build problems.

